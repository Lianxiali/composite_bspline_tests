// physical parameters
MU  = 0.01
RHO = 1.0
L   = 1.0
// grid spacing parameters
MAX_LEVELS = 1                                 // maximum number of levels in locally refined grid
REF_RATIO  = 2                                 // refinement ratio between levels
THICKNESS = 0.03125 // 2 elements in thickness direction
ds = THICKNESS / 2
MFAC = 0.5
DX = ds / MFAC
N = int(L / DX)                                         // actual    number of grid cells on coarsest grid level
NFINEST = N       // effective number of grid cells on finest   grid level


ELEM_TYPE = "QUAD9"                            // type of element to use for structure discretization
PK1_DEV_QUAD_ORDER = "SEVENTH"
PK1_DIL_QUAD_ORDER = "FIFTH"

// solver parameters
IB_DELTA_FUNCTION          = "IB_4"            // the type of smoothed delta function to use for Lagrangian-Eulerian interaction
SPLIT_FORCES               = FALSE              // whether to split interior and boundary forces
USE_JUMP_CONDITIONS        = FALSE             // whether to impose pressure jumps at fluid-structure interfaces
USE_CONSISTENT_MASS_MATRIX = FALSE              // whether to use a consistent or lumped mass matrix
IB_USE_NODAL_QUADRATURE    = TRUE
IB_POINT_DENSITY           = 2.0               // approximate density of IB quadrature points for Lagrangian-Eulerian interaction
SOLVER_TYPE                = "STAGGERED"       // the fluid solver to use (STAGGERED or COLLOCATED)
DT                         = 1.0e-3*DX           // maximum timestep size
CFL_MAX                    = 0.3               // maximum CFL number
START_TIME                 = 0.0e0             // initial simulation time
END_TIME                   = 10               // final simulation time
GROW_DT                    = 2.0e0             // growth factor for timesteps
NUM_CYCLES                 = 1                 // number of cycles of fixed-point iteration
CONVECTIVE_TS_TYPE         = "ADAMS_BASHFORTH" // convective time stepping type
CONVECTIVE_OP_TYPE         = "PPM"             // convective differencing discretization type
CONVECTIVE_FORM            = "ADVECTIVE"       // how to compute the convective terms
NORMALIZE_PRESSURE         = FALSE             // whether to explicitly force the pressure to have mean zero
ERROR_ON_DT_CHANGE         = TRUE              // whether to emit an error message if the time step size changes
VORTICITY_TAGGING          = FALSE             // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER                 = 1                 // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL        = 0.5               // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
OUTPUT_U                   = TRUE
OUTPUT_P                   = TRUE
OUTPUT_F                   = TRUE
OUTPUT_OMEGA               = FALSE
OUTPUT_DIV_U               = FALSE
ENABLE_LOGGING             = TRUE

// tether penalty data from static cylinder case
C1_S = 1.0e5
KAPPA_S_BODY = 1.0e6
ETA_S_BODY = 0.0
KAPPA_S_SURFACE = 1.0e6
ETA_S_SURFACE = 0.0

// collocated solver parameters
PROJECTION_METHOD_TYPE = "PRESSURE_UPDATE"
SECOND_ORDER_PRESSURE_UPDATE = TRUE

VelocityBcCoefs_0 {
   LOAD_TIME = 2
   PI = 3.141596535897973
   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "t < LOAD_TIME ? -10.0*sin(PI*t/(2*LOAD_TIME)) : -10.0"
   gcoef_function_1 = "t < LOAD_TIME ?  10.0*sin(PI*t/(2*LOAD_TIME)) :  10.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

IBHierarchyIntegrator {
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_CYCLES
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT
   error_on_dt_change  = ERROR_ON_DT_CHANGE
   enable_logging      = ENABLE_LOGGING
}

IBFEMethod {
   IB_delta_fcn               = IB_DELTA_FUNCTION
   split_forces               = SPLIT_FORCES
   use_jump_conditions        = USE_JUMP_CONDITIONS
   use_consistent_mass_matrix = USE_CONSISTENT_MASS_MATRIX
   IB_point_density           = IB_POINT_DENSITY
   IB_use_nodal_quadrature    = IB_USE_NODAL_QUADRATURE   
}

INSCollocatedHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25,0.125
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
   projection_method_type        = PROJECTION_METHOD_TYPE
   use_2nd_order_pressure_update = SECOND_ORDER_PRESSURE_UPDATE
}

INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25,0.125
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
}

Main {
   solver_type = SOLVER_TYPE

// log file parameters
   log_file_name               = "IB2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt","ExodusII"
   viz_dump_interval           = 20*NFINEST
   viz_dump_dirname            = "IB4/viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_IB2d"

// hierarchy data dump parameters
   data_dump_interval          = 0
   data_dump_dirname           = "hier_data_IB2d"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),(2*N - 1,N - 1) ]
   x_lo = 0  ,0
   x_up = 2*L,L
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   8,  8  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}
