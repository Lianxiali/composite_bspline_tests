// physical parameters
Re = 100
RHO   = 1.0                                         // mass density of fluid (gm/cm^3)
MU    = 0.01                                        // dynamic viscosity of fluid (gm/(cm s))
U_MAX = 1.0

PI = 3.14159265359
THETA = PI/12
MFAC = 0.5

// discretization parameters
MAX_LEVELS = 1                                      // maximum number of levels in locally refined grid
REF_RATIO  = 1                                      // refinement ratio between levels
N = 64                                 // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N            // effective number of grid cells on finest   grid level
L = 5.0                                           // channel length (cm)
H = 5.0                                           // domain  height (cm)
D=1
D0 = D/cos(THETA) // slanted
CY1 = (L - L*tan(THETA) - D0)/2 + D/2
CY2 = CY1+L*tan(THETA)

P_E = 4* MU * L 
                                          // body    width  (cm)
DP   = 8* MU * L/cos(THETA)*U_MAX/(D*D)                                         // external pressure (dyne/cm^2)
DX0 = H/N                                           // mesh width on coarsest grid level (cm)
DX  = H/NFINEST                                     // mesh width on finest   grid level (cm)

//Computing velocity profile
X_LOC_MIN = 0.3*L
X_LOC_MAX = 0.7*L
Y_LOC_MIN = 0.0 
Y_LOC_MAX = H 

// Yo = CY1 + X_LOC_MIN*tan(THETA)
// Yi = CY2 - X_LOC_MIN*tan(THETA)

Yo = H/2
Yi = H/2

FEEDBACK_FORCER = FALSE

// solver parameters
// "IB_3"
// "IB_4"
// "DISCONTINUOUS_LINEAR"
// "COMPOSITE_BSPLINE_32"
// "COMPOSITE_BSPLINE_43"
// "COMPOSITE_BSPLINE_54"
// "COMPOSITE_BSPLINE_65"
DELTA_FUNCTION             = "IB_3"            // the type of smoothed delta function to use for Lagrangian-Eulerian interaction
SOLVER_TYPE                = "STAGGERED"            // the fluid solver to use (STAGGERED or COLLOCATED)
START_TIME                 = 0.0e0                  // initial simulation time
END_TIME                   = 100             // final simulation time
GROW_DT                    = 1.0e0                  // growth factor for timesteps
NUM_CYCLES                 = 1                      // number of cycles of fixed-point iteration
CONVECTIVE_TS_TYPE         = "ADAMS_BASHFORTH"      // convective time stepping type
CONVECTIVE_OP_TYPE         = "STABILIZED_PPM"       // convective differencing discretization type
CONVECTIVE_FORM            = "ADVECTIVE"            // how to compute the convective terms
NORMALIZE_PRESSURE         = FALSE                   // whether to explicitly force the pressure to have mean zero
CFL_MAX                    = 0.01                   // maximum CFL number
DT       				      = CFL_MAX*DX/U_MAX        // maximum timestep size
ERROR_ON_DT_CHANGE         = TRUE                   // whether to emit an error message if the time step size changes
VORTICITY_TAGGING          = FALSE                   // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER                 = 1                      // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL        = 0.5                    // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
OUTPUT_U                   = TRUE
OUTPUT_P                   = TRUE
OUTPUT_F                   = TRUE
OUTPUT_OMEGA               = TRUE
OUTPUT_DIV_U               = TRUE
ENABLE_LOGGING             = TRUE

STRUCTURE_LIST = "pipe"
//SPRING_CONSTANT = 1*0.0022/(cos(THETA) * DT^2)
//SPRING_DAMPING = 0
SPRING_CONSTANT = 36000
SPRING_DAMPING = 10


X1_lower = 0.5*H - 0.5*D/cos(THETA) - 0.5*L*tan(THETA) 
X1_upper = X1_lower + D/cos(THETA)

// Parabolic profile
U = "( X1 <= (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 >= (X1_upper + X0*tan(theta)) ? 0.0 : cos(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))"
V = "( X1 <= (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 >= (X1_upper + X0*tan(theta)) ? 0.0 : sin(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))"
P = "(X1 <= (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 >= (X1_upper + X0*tan(theta)) ? 0.0 : (-2.*p_e*(X0*cos(theta) + (X1-X1_lower)*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))"



VelocityInitialConditions {
	p_e = P_E
    theta = THETA
    D = D
    //w = W
    L = L
    X1_lower = X1_lower 
    X1_upper = X1_upper 
    mu = MU
    function_0 = U
    function_1 = V
}


PressureInitialConditions {
    D = D
    L = L
    H = H
    
    mu = MU
    p_e = P_E
    theta = THETA
    X1_lower = X1_lower 
    X1_upper = X1_upper 
    function = P
}


VelocityBcCoefs_0 {
    theta = THETA
    p_e = P_E
    D = D
    //w = W
    L = L
    X1_lower = X1_lower 
    X1_upper = X1_upper 
    mu = MU

    H = H

    acoef_function_0 = "0.0"
    acoef_function_1 = "0.0"
    acoef_function_2 = "1.0"
    acoef_function_3 = "1.0"

    bcoef_function_0 = "1.0" 
    bcoef_function_1 = "1.0"
    bcoef_function_2 = "0.0"
    bcoef_function_3 = "0.0"

    gcoef_function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( (X1 > (X1_upper + X0*tan(theta))) ? 0.0 : -(-2.*p_e*(X0/cos(theta) + (X1-X1_lower-X0*tan(theta))*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))"    
    gcoef_function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( (X1 > (X1_upper + X0*tan(theta))) ? 0.0 : -(-2.*p_e*(X0/cos(theta) + (X1-X1_lower-X0*tan(theta))*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))"    
    gcoef_function_2 = "0.0"
    gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {

    theta = THETA
    p_e = P_E
    D = D
    //w = W
    L = L
    X1_lower = X1_lower 
    X1_upper = X1_upper 
    mu = MU
 
    H = H

   acoef_function_0 = "1.0" 
   acoef_function_1 = "1.0" 
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0" 
   bcoef_function_1 = "0.0" 
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = V 
   gcoef_function_1 = V 
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}




IBHierarchyIntegrator {
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_CYCLES
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT
   error_on_dt_change  = ERROR_ON_DT_CHANGE
   enable_logging      = ENABLE_LOGGING
   IB_delta_fcn        = DELTA_FUNCTION
   viz_dump_dirname    = "viz_IB2d"   
}

IBMethod {
   interp_delta_fcn = DELTA_FUNCTION
   spread_delta_fcn = DELTA_FUNCTION //"DISCONTINUOUS_LINEAR"
   enable_logging = ENABLE_LOGGING
}

IBRedundantInitializer {
   max_levels      = MAX_LEVELS
}
spring_stiffness = 36000.0  // dyne

IBStandardInitializer {
   max_levels      = MAX_LEVELS
   structure_names = "pipe_top", "pipe_bottom"
   pipe_top
   {
      level_number = MAX_LEVELS - 1
      ds = 0
      uniform_target_stiffness  = spring_stiffness
      uniform_target_damping    = ds
   }
   pipe_bottom
   {
      level_number = MAX_LEVELS - 1
      ds = 0
      uniform_target_stiffness = spring_stiffness
      uniform_target_damping = ds
   }   
}
INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.01
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
}

Main {

// log file parameters
   log_file_name               = "IB2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt","Silo"
   viz_dump_interval           = 1 //int(0.05/DT)
   viz_dump_dirname            = "viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_IB2d"

// hierarchy data dump parameters
   data_dump_interval          = 0
   data_dump_dirname           = "hier_data_IB2d"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0, 0),(int((L/H)*N) - 1, N - 1) ]
   x_lo = 0,0
   x_up = L,H
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO,REF_RATIO
      level_6 = REF_RATIO,REF_RATIO,REF_RATIO
      level_7 = REF_RATIO,REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   8,  8 // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.80e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.80e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*","IBTK::*::*","*::*::*"
}

